/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package searching;

import static java.lang.Integer.parseInt;
import static java.lang.Math.sqrt;
import java.util.Arrays;
import java.util.Random;

/**
 *
 * @author Naveen Tennakoon
 */
public class Main extends javax.swing.JFrame {

    int [] arr = new int[10000];
    
    public Main() {
        initComponents();
        generateArray();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtKey = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        txtJump = new javax.swing.JTextField();
        txtLinear = new javax.swing.JTextField();
        txtBinary = new javax.swing.JTextField();
        txtInterpolation = new javax.swing.JTextField();
        txtBinaryI = new javax.swing.JTextField();
        txtLinearI = new javax.swing.JTextField();
        txtInterpolationI = new javax.swing.JTextField();
        txtJumpI = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnExecuteLinear = new javax.swing.JButton();
        btnExecuteJump = new javax.swing.JButton();
        btnExecuteBinary = new javax.swing.JButton();
        btnExecuteInterpolation = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        taArray = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Searching Algorithms"); // NOI18N
        setResizable(false);

        txtKey.setToolTipText("");
        txtKey.setName("txtInput"); // NOI18N
        txtKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKeyActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel1.setText("Enter key");

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        txtJump.setEditable(false);
        txtJump.setBackground(new java.awt.Color(255, 255, 255));
        txtJump.setName("txtJump"); // NOI18N

        txtLinear.setEditable(false);
        txtLinear.setBackground(new java.awt.Color(255, 255, 255));
        txtLinear.setName("txtLinear"); // NOI18N

        txtBinary.setEditable(false);
        txtBinary.setBackground(new java.awt.Color(255, 255, 255));
        txtBinary.setName("txtBinary"); // NOI18N

        txtInterpolation.setEditable(false);
        txtInterpolation.setBackground(new java.awt.Color(255, 255, 255));
        txtInterpolation.setName("txtLinear"); // NOI18N

        txtBinaryI.setEditable(false);
        txtBinaryI.setBackground(new java.awt.Color(255, 255, 255));
        txtBinaryI.setName("txtLinear"); // NOI18N

        txtLinearI.setEditable(false);
        txtLinearI.setBackground(new java.awt.Color(255, 255, 255));
        txtLinearI.setName("txtLinear"); // NOI18N

        txtInterpolationI.setEditable(false);
        txtInterpolationI.setBackground(new java.awt.Color(255, 255, 255));
        txtInterpolationI.setName("txtLinear"); // NOI18N

        txtJumpI.setEditable(false);
        txtJumpI.setBackground(new java.awt.Color(255, 255, 255));
        txtJumpI.setName("txtLinear"); // NOI18N

        jLabel4.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel4.setText("Runtime");

        jLabel5.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel5.setText("Index of Key");

        jLabel7.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel7.setText("Jump Search");

        jLabel8.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel8.setText("Binary Search");

        jLabel9.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel9.setText("Linear Search");

        jLabel10.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel10.setText("Interpolation Search");

        btnExecuteLinear.setText("Execute");
        btnExecuteLinear.setName("btnExecuteLinear"); // NOI18N
        btnExecuteLinear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteLinearActionPerformed(evt);
            }
        });

        btnExecuteJump.setText("Execute");
        btnExecuteJump.setName("btnExecute"); // NOI18N
        btnExecuteJump.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteJumpActionPerformed(evt);
            }
        });

        btnExecuteBinary.setText("Execute");
        btnExecuteBinary.setName("btnExecute"); // NOI18N
        btnExecuteBinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteBinaryActionPerformed(evt);
            }
        });

        btnExecuteInterpolation.setText("Execute");
        btnExecuteInterpolation.setName("btnExecute"); // NOI18N
        btnExecuteInterpolation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteInterpolationActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtInterpolationI, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExecuteInterpolation, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtBinaryI, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExecuteBinary, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtJumpI, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExecuteJump, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtLinearI, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExecuteLinear, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtLinear, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(198, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtInterpolation, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBinary, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtJump, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtLinearI, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtLinear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnExecuteLinear, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtBinaryI, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtBinary, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnExecuteBinary, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtJumpI, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtJump, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnExecuteJump, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtInterpolationI, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtInterpolation, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExecuteInterpolation, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())))
        );

        taArray.setEditable(false);
        taArray.setColumns(1);
        taArray.setRows(1000);
        jScrollPane1.setViewportView(taArray);

        jLabel3.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel3.setText("Random Generated Table");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtKey))
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateArray(){
        Random rd = new Random();
        int count = 0;
        int num;
        while(count < arr.length){
            num = rd.nextInt(100000);
            boolean repeat = false;
            do{
                for(int i = 0; i < arr.length; i++){
                    if(num == arr[i]){
                        repeat = true;
                        break;
                    }
                    else if(i == count){
                        arr[count] = num;
                        count++;
                        repeat = true;
                        break;
                    }
                }
            }while(!repeat);
        }
        Arrays.sort(arr);
        for(int i = 0; i < arr.length; i++){
            taArray.append(String.valueOf(arr[i])+"\n");
        }
    }
    private void txtKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtKeyActionPerformed

    private void btnExecuteLinearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteLinearActionPerformed
        int input = parseInt(txtKey.getText());
        int startTime = (int) System.nanoTime();
        int flag = 0;
        for(int i = 0; i < arr.length; i++){    
            if(arr[i] == input){
                flag = 1;
                txtLinearI.setText(String.valueOf(i));
                break;
            }  
        }
        if(flag == 0){
            txtLinearI.setText("NOT FOUND"); 
        }
        int endTime = (int) System.nanoTime();
        int executionTime = endTime - startTime;
        txtLinear.setText(String.valueOf(executionTime));
    }//GEN-LAST:event_btnExecuteLinearActionPerformed

    private void btnExecuteJumpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteJumpActionPerformed
        int input = parseInt(txtKey.getText());        
        int startTime = (int) System.nanoTime();
        int n = arr.length;
        int step = (int)Math.floor(Math.sqrt(n));
        int prev = 0; 
        while (arr[Math.min(step, n)-1] < input) { 
            prev = step; 
            step += (int)Math.floor(Math.sqrt(n)); 
            if (prev >= n){
                txtJumpI.setText("NOT FOUND"); 
                break;
            }        
        }
        while (arr[prev] < input) { 
            prev++; 
            if (prev == Math.min(step, n)){
                txtJumpI.setText("NOT FOUND"); 
                break;
            } 
        }  
        if (arr[prev] == input){ 
            txtJumpI.setText(String.valueOf(prev));  
        }
        int endTime = (int) System.nanoTime(); 
        int executionTime = endTime - startTime;
        txtJump.setText(String.valueOf(executionTime));
    }//GEN-LAST:event_btnExecuteJumpActionPerformed

    private void btnExecuteBinaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteBinaryActionPerformed
        int input = parseInt(txtKey.getText());        
        int startTime = (int) System.nanoTime();
        int first = 0;
        int last = arr.length - 1;
        int mid = (first + last)/2;  
        while( first <= last ){  
            if ( arr[mid] < input ){  
                first = mid + 1;     
            }
            else if ( arr[mid] == input ){  
                txtBinaryI.setText(String.valueOf(mid));  
                break;  
            }
            else{  
                last = mid - 1;  
            }  
            mid = (first + last)/2;  
        }  
        if ( first > last ){  
            txtBinaryI.setText("NOT FOUND"); 
        }          
        int endTime = (int) System.nanoTime(); 
        int executionTime = endTime - startTime;
        txtBinary.setText(String.valueOf(executionTime));
    }//GEN-LAST:event_btnExecuteBinaryActionPerformed

    private void btnExecuteInterpolationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteInterpolationActionPerformed
        int input = parseInt(txtKey.getText());        
        int startTime = (int) System.nanoTime();
        int low = 0;
        int high = (arr.length - 1); 
        while (low <= high && input >= arr[low] && input <= arr[high]) {         
  
            if (low == high) { 
                if (arr[low] == input){
                    txtInterpolationI.setText(String.valueOf(low));  
                }  
                break;
            }               
            int pos = low + (((high - low) / (arr[high] - arr[low]))*(input - arr[low]));  
            if (arr[pos] == input) 
                txtInterpolationI.setText(String.valueOf(pos));   
            if (arr[pos] < input) 
                low = pos + 1; 
            else
                high = pos - 1; 
        }  
        int endTime = (int) System.nanoTime(); 
        int executionTime = endTime - startTime;
        txtInterpolation.setText(String.valueOf(executionTime));
    }//GEN-LAST:event_btnExecuteInterpolationActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExecuteBinary;
    private javax.swing.JButton btnExecuteInterpolation;
    private javax.swing.JButton btnExecuteJump;
    private javax.swing.JButton btnExecuteLinear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea taArray;
    private javax.swing.JTextField txtBinary;
    private javax.swing.JTextField txtBinaryI;
    private javax.swing.JTextField txtInterpolation;
    private javax.swing.JTextField txtInterpolationI;
    private javax.swing.JTextField txtJump;
    private javax.swing.JTextField txtJumpI;
    private javax.swing.JTextField txtKey;
    private javax.swing.JTextField txtLinear;
    private javax.swing.JTextField txtLinearI;
    // End of variables declaration//GEN-END:variables
}
